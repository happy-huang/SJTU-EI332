// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/17/2020 12:32:32"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    decode2to4
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module decode2to4_vlg_sample_tst(
	A1,
	A2,
	Ena,
	sampler_tx
);
input  A1;
input  A2;
input  Ena;
output sampler_tx;

reg sample;
time current_time;
always @(A1 or A2 or Ena)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module decode2to4_vlg_check_tst (
	Y,
	sampler_rx
);
input [3:0] Y;
input sampler_rx;

reg [3:0] Y_expected;

reg [3:0] Y_prev;

reg [3:0] Y_expected_prev;

reg [3:0] last_Y_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	Y_prev = Y;
end

// update expected /o prevs

always @(trigger)
begin
	Y_expected_prev = Y_expected;
end


// expected Y[ 3 ]
initial
begin
	Y_expected[3] = 1'bX;
end 
// expected Y[ 2 ]
initial
begin
	Y_expected[2] = 1'bX;
end 
// expected Y[ 1 ]
initial
begin
	Y_expected[1] = 1'bX;
end 
// expected Y[ 0 ]
initial
begin
	Y_expected[0] = 1'bX;
end 
// generate trigger
always @(Y_expected or Y)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Y = %b | ",Y_expected_prev);
	$display("| real Y = %b | ",Y_prev);
`endif
	if (
		( Y_expected_prev[0] !== 1'bx ) && ( Y_prev[0] !== Y_expected_prev[0] )
		&& ((Y_expected_prev[0] !== last_Y_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Y_exp[0] = Y_expected_prev[0];
	end
	if (
		( Y_expected_prev[1] !== 1'bx ) && ( Y_prev[1] !== Y_expected_prev[1] )
		&& ((Y_expected_prev[1] !== last_Y_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Y_exp[1] = Y_expected_prev[1];
	end
	if (
		( Y_expected_prev[2] !== 1'bx ) && ( Y_prev[2] !== Y_expected_prev[2] )
		&& ((Y_expected_prev[2] !== last_Y_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Y_exp[2] = Y_expected_prev[2];
	end
	if (
		( Y_expected_prev[3] !== 1'bx ) && ( Y_prev[3] !== Y_expected_prev[3] )
		&& ((Y_expected_prev[3] !== last_Y_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Y_exp[3] = Y_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module decode2to4_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A1;
reg A2;
reg Ena;
// wires                                               
wire [3:0] Y;

wire sampler;                             

// assign statements (if any)                          
decode2to4 i1 (
// port map - connection between master ports and signals/registers   
	.A1(A1),
	.A2(A2),
	.Ena(Ena),
	.Y(Y)
);

// A1
initial
begin
	A1 = 1'b0;
	A1 = #60000 1'b1;
	A1 = #40000 1'b0;
	A1 = #130000 1'b1;
	A1 = #30000 1'b0;
	A1 = #60000 1'b1;
	A1 = #460000 1'b0;
end 

// A2
initial
begin
	A2 = 1'b0;
	A2 = #230000 1'b1;
	A2 = #30000 1'b0;
	A2 = #60000 1'b1;
	A2 = #460000 1'b0;
end 

// Ena
initial
begin
	Ena = 1'b0;
	Ena = #230000 1'b1;
	Ena = #30000 1'b0;
	Ena = #60000 1'b1;
	Ena = #460000 1'b0;
end 

decode2to4_vlg_sample_tst tb_sample (
	.A1(A1),
	.A2(A2),
	.Ena(Ena),
	.sampler_tx(sampler)
);

decode2to4_vlg_check_tst tb_out(
	.Y(Y),
	.sampler_rx(sampler)
);
endmodule

